// create assets 
string {how to raotate this }
00 01 02 03		      12 08 04 00	      15 14 13 12
04 05 06 07    --------->     13 09 05 01    ----->   11 10 09 08
08 09 10 11		      14 10 06 02	      07 06 05 04
12 13 14 15		      15 11 07 03	      03 02 01 00
x = 10			      x = 9		      x = 5              



|	 |TETRIS|	   |   
|	o        o	   |
|	    i 	           |
|	    		   |
|	 ----      	   |
|	 		   |
|			   | 
|__________________________|

check for collision every 10th cycle and then move the block down

if collision(|) -> cant go further but wont stop falling

if collision(_) -> camt go further , stop , and pass the index to tets cells


tetromino tet 

tet =		____	  _X__	   ____	    __X_
			_X__	  _XX_	   _XXX	    _XX_
			XXX_	  _X__	   __X_	    __X_
			____	  ____	   ____	    ____

	 __X_	  0,0 0,1 0,2 0,3    
	 __X_	  1,0 1,1 1,2 1,3
	 __X_	  2,0 2,1 2,2 2,3
	 __X_	  3,0 3,1 3,2 3,3

	 ____	  0,0 1,0 2,0 3,0
	 ____	  0,1 1,1 2,1 3,1
	 XXXX	  0,2 1,2 2,2 3,2
	 ____	  0,3 1,3 2,3 3,3

char buffer[][] ;

char [matrix]

for(int i = gen.x ; i < res , ; i++){
   for(int j = gen.y ; j < res ; j++){
      s_pixel[gen.x][gn.y] = tet[x][y]
   }
}

// switch inside while

int main(){

   for
while(1)
while(2)
}

//volatile variable 
[a][b]


char s_pixel[rows][cols]

A->ptr

spawn_tet(&screen , &m)); 
 for(int i = 0  , i < m->rows , ; i++ ){
   for(int j  = 0 ;j < m->cols ; j++){
      *cell(screen->buffer , 0 + i , 32 + j) = *cell(&m , i , j);
   }
 }
  **A***
  ******
  ******
  ******

//init screen
  initScreen(&header,'X',4,66);

//assign buffer
  assignBuffer(&header);
  int assignBuffer(int* queue , Screen* screen){

   if(BUFFCOUNT = MAXBUFFERS){perror("max buffers reached");}

   header->buffer = (char*)malloc(header->rows * header->cols , *sizeof(char));
   header->index = BUFFCOUNT;
   *(queue)[header->index] = header->rows * header->cols
   BUFFCOUNT++;
  }
  
assignBuffer(&header , global.queue);
assignBuffer(&screen , global.queue);
assignBuffer(&console , global.queue);

for(int i = 0 ; i < header->rows ; i++){
      for(int j = 0 ; j < header->cols , j++){
	 *(pixel(&header, i , j)) = header.type;
      }
   *pixel(&header , i , header.cols - 2) = '\r';
   *pixel(&header , i , header.cols - 1) = '\n';
   }

//render mamanger (Buffer* global){

   //shit code
  memcpy(global.b , screen.buffer , global.queue[0]);
  memcpy(global.b+global.queue[0] , screen.buffer , global.queue[1]);
  memcpy(global.b+global.queue[0]+globabl.queue[1], screen.buffer,global.queue[2]);
}


// update buffer





window 

application buffer
      |
      +
window[0] -> start window
window[1] -> game screen

// a window wont be updated , context will be 
(context)
+++++++++++++++++++=PLUG AND PLAY APPROACH

////////////////////////////////////////////////////////////////////

+++++++++++++++++++=THE LAYOUT APPROACH

|___|___|___|
|___|___|___|

buff1
buff2
buff3

layout -> l1.box1 | l1.box2 | l1.box3

global buffer -> 




////////////////////////////////////////////////////////////////////

Game Array {}
[Home Screen , Player Screen] <- will always in active state but stuff inside will be
killed 

Home Sceen  => Welcome State -> Player Menu

Welcome State = ascii image background  
Player Menu   = New Game + Highscores + Exit 
						|
					  +++
Player Screen =  Header + Game Area + console{only for debuggin i think}

Screens -> stacks 
window area = 32 * 64

loop(){
initscreen();
//screen witha box in it 
screenViewObjectStack
processKeyPress()
}


queue[5]

render(Window* win){
	write(STDOUT_FILENO , win->queue[] , buffer.len);

}

HomeScreen()  // window is more like rendering area 


	buffer -> screen -> windows

	tetris 
HomeScreen Window 0
GameScreen Window 1

initTerminal(); -> rawMode , clearScreen , 
